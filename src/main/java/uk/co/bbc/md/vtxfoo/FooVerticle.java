package uk.co.bbc.md.vtxfoo;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

public class FooVerticle extends AbstractVerticle {
    private JDBCClient client;

    @Override
    public void start(Future<Void> fut) {
        FooVerticle fv = this;
        // Create a JDBC client with a test database
        client = JDBCClient.createShared(vertx,
                                         new JsonObject().put("url",
                                                              "jdbc:hsqldb:mem:test?shutdown=true")
                                                         .put("driver_class",
                                                              "org.hsqldb.jdbcDriver"));
        setUpInitialData(ready -> {
            Router router = Router.router(vertx);
            router.route().handler(BodyHandler.create());
            router.route("/ip*").handler(ctx -> client.getConnection(result -> {
                if (result.failed()) {
                    ctx.fail(result.cause());
                } else {
                    SQLConnection conn = result.result();
                    // Save the connection on the context
                    ctx.put("conn", conn);
                    // Return the connection back to the jdbc pool.
                    ctx.addHeadersEndHandler(done -> conn.close(v -> {}));
                    ctx.next();
                }
            })).failureHandler(ctx -> {
                SQLConnection conn = ctx.get("conn");
                if (conn != null) {
                    conn.close(v -> {});
                }
            });

            router.get("/ip/:ip").handler(fv::handleGetIp);
            router.get("/status").handler(fv::handleGetStatus);

            vertx.createHttpServer().requestHandler(router::accept)
                 .listen(config().getInteger("http.port", 8080), result -> {
                if (result.succeeded()) {
                    fut.complete();
                } else {
                    fut.fail(result.cause());
                }
            });
        });
    }

    private void handleGetIp(RoutingContext ctx) {
        String ip = ctx.request().getParam("ip");
        HttpServerResponse response = ctx.response();
        if (ip == null) {
            sendError(400, response);
        } else {
            SQLConnection conn = ctx.get("conn");
            conn.queryWithParams("SELECT ip, isp FROM ips where ip = ?", new JsonArray().add(ip),
                                 query -> {
                                     if (query.failed()) {
                                         sendError(500, response);
                                     } else if (query.result().getNumRows() == 0) {
                                         sendError(404, response);
                                     } else {
                                         response.putHeader("content-type", "application/json")
                                                 .end(query.result().getRows().get(0).encode());
                                     }
                                 });
        }
    }

    private void handleGetStatus(RoutingContext ctx) {
        ctx.response().setStatusCode(200).end();
    }

    private void sendError(int statusCode, HttpServerResponse response) {
        response.setStatusCode(statusCode).end();
    }

    private void setUpInitialData(Handler<Void> done) {
        client.getConnection(res -> {
            if (res.failed()) { throw new RuntimeException(res.cause()); }
            final SQLConnection conn = res.result();
            conn.execute("CREATE TABLE IF NOT EXISTS "
                         + " ips(id INTEGER GENERATED BY DEFAULT AS IDENTITY, "
                         + " ip VARCHAR(45), isp VARCHAR(255))", ddl -> {
                if (ddl.failed()) { throw new RuntimeException(ddl.cause()); }
                conn.execute("INSERT INTO ips (id, ip, isp) VALUES"
                             + " (DEFAULT, '193.113.9.162', 'BT'), "
                             + " (DEFAULT, '212.58.246.78', 'BBC'), "
                             + " (DEFAULT, '205.178.189.129', 'TalkTalk')", fixtures -> {
                    if (fixtures.failed()) { throw new RuntimeException(fixtures.cause()); }
                    done.handle(null);
                });
            });
        });
    }
}
